{"version":3,"sources":["lib/inverse.js","lib/scramble.js","lib/twophase.js","App.js","index.js"],"names":["inverse","faceNames","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","faceNums","U","R","F","D","L","B","E","M","S","x","y","z","u","r","f","d","l","b","parseAlg","arg","k","len","move","part","power","ref","results","split","length","Error","push","face","result","str","reverse","substring","module","exports","scrambleLib","makeShortScramble","faceList","turnList","scrambleList","Math","floor","random","turn","scrambleText","forEach","value","trim","makeCorrectScramble","scr1","scr2","scr1ListTmp","scr1List","item","itemTmp","scr2ListTmp","scr2List","scr1ListRes","slice","scr2ListRes","flag","count","pop","shift","scrList","concat","scrStr","twophase","moveName","moveObject","restrictedMove","Cnk","twistTable","flipTable","eSliceTable","cPTable","UDEPTable","eSliceTable2","twistESlicePrun","flipESlicePrun","cPESlicePrun","UDEPESlicePrun","initialized","getTwist","obj","ret","i","co","getFlip","eo","getESlice","s","ep","getCP","tmp","cp","fact","bitCount","getUDEP","getESlice2","cur","setTwist","idx","tw","setFlip","fl","setESlice","setCP","arr","splice","setUDEP","setESlice2","getCornerParity","p","getEdgeParity","initTwistTable","create2DArray","j","obj_0","ArrayCube","apply","initFlipTable","initESliceTable","initCPTable","initUDEPTable","initESliceTable2","initTwistESlicePrun","children1","children2","done","depth","Array","fill","initFlipESlicePrun","initCPESlicePrun","initUDEPESlicePrun","this","map","IndexCubePhase1","IndexCubePhase2","twist","flip","eslice","newTwist","newFlip","newESlice","newMove","udep","eslice2","newCp","newUDEP","newESlice2","_move","indexOf","search","root","max","stack","_stack","root1","root2","_root","toIndexPhase1","Stack","nextMove","nextFace","curFace","size","copy","toIndexPhase2","_depth","_cur","_nextMove","_nextFace","_curFace","getRandomState","seed","Random","randomInt","setEP","cancelMoves","moves","axisList","suffixList","newFaceList","newAxisList","newSuffixList","cancelled","swapElement","bits","n","l1","l2","w","Date","now","t","abs","_random","heap","unshift","initialize","initUtil","solve","scramble","_solution","solution","val","getScramble","scr","console","log","App","classes","makeStyles","theme","container","margin","padding","maxWidth","formControl","spacing","minWidth","useStyles","useState","setScrambleList","moveCount","setMoveCount","itemCount","setItemCount","isVisible","setIsVisible","useEffect","isVisibleListTmp","scrambleListTmp","pair","makeScramble","shortScramble","redundantScramble","className","Typography","variant","FormControl","InputLabel","id","Select","labelId","onChange","event","target","MenuItem","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","index","Button","onClick","handleButtonChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d71d8de.chunk.js","sourcesContent":["const inverse = (function () {\n    const faceNames = {\n        0: 'U',\n        1: 'R',\n        2: 'F',\n        3: 'D',\n        4: 'L',\n        5: 'B',\n        6: 'E',\n        7: 'M',\n        8: 'S',\n        9: 'x',\n        10: 'y',\n        11: 'z',\n        12: 'u',\n        13: 'r',\n        14: 'f',\n        15: 'd',\n        16: 'l',\n        17: 'b'\n    };\n\n    const faceNums = {\n        U: 0,\n        R: 1,\n        F: 2,\n        D: 3,\n        L: 4,\n        B: 5,\n        E: 6,\n        M: 7,\n        S: 8,\n        x: 9,\n        y: 10,\n        z: 11,\n        u: 12,\n        r: 13,\n        f: 14,\n        d: 15,\n        l: 16,\n        b: 17\n    };\n\n    const inverse = (arg) => {\n        var face, k, len, move, power, result, str;\n        result = (function() {\n            var k, len, ref, results;\n            ref = parseAlg(arg);\n            results = [];\n            for (k = 0, len = ref.length; k < len; k++) {\n                move = ref[k];\n                face = move / 3 | 0;\n                power = move % 3;\n                results.push(face * 3 + -(power - 1) + 1);\n            }\n            return results;\n        })();\n        result.reverse();\n        if (typeof arg === 'string') {\n            str = '';\n            for (k = 0, len = result.length; k < len; k++) {\n                move = result[k];\n                face = move / 3 | 0;\n                power = move % 3;\n                str += faceNames[face];\n                if (power === 1) {\n                    str += '2';\n                } else if (power === 2) {\n                    str += \"'\";\n                }\n                str += ' ';\n            }\n            return str.substring(0, str.length - 1);\n        } else if (arg.length != null) {\n            return result;\n        } else {\n            return result[0];\n        }\n    }\n\n    const parseAlg = (arg) => {\n        var k, len, move, part, power, ref, results;\n        if (typeof arg === 'string') {\n            ref = arg.split(/\\s+/);\n            // String\n            results = [];\n            for (k = 0, len = ref.length; k < len; k++) {\n                part = ref[k];\n                if (part.length === 0) {\n                    // First and last can be empty\n                    continue;\n                }\n                if (part.length > 2) {\n                    throw new Error(`Invalid move: ${part}`);\n                }\n                move = faceNums[part[0]];\n                if (move === void 0) {\n                    throw new Error(`Invalid move: ${part}`);\n                }\n                if (part.length === 1) {\n                    power = 0;\n                } else {\n                    if (part[1] === '2') {\n                        power = 1;\n                    } else if (part[1] === \"'\") {\n                        power = 2;\n                    } else {\n                        throw new Error(`Invalid move: ${part}`);\n                    }\n                }\n                results.push(move * 3 + power);\n            }\n            return results;\n        } else if (arg.length != null) {\n            // Already an array\n            return arg;\n        } else {\n            // A single move\n            return [arg];\n        }\n    }\n\n    return {\n        inverse: inverse\n    }\n})();\n\nmodule.exports = inverse","const scrambleLib = (function () {\n    const makeShortScramble = (len) => {\n        const faceList = [\"U\", \"R\", \"F\", \"D\", \"L\", \"B\"];\n        const turnList = [\"\", \"'\", \"2\"];\n        const scrambleList = [];\n        while (scrambleList.length < len) {\n            const face = faceList[Math.floor(Math.random() * faceList.length)];\n            const turn = turnList[Math.floor(Math.random() * turnList.length)];\n            if (scrambleList.length >= 1) {\n                if (face === scrambleList[scrambleList.length - 1].face) {\n                    continue;\n                }\n            }\n            if (scrambleList.length >= 2) {\n                if (face === scrambleList[scrambleList.length - 2].face && (\n                    (face === \"U\" && scrambleList[scrambleList.length - 1].face === \"D\") ||\n                    (face === \"D\" && scrambleList[scrambleList.length - 1].face === \"U\") ||\n                    (face === \"R\" && scrambleList[scrambleList.length - 1].face === \"L\") ||\n                    (face === \"L\" && scrambleList[scrambleList.length - 1].face === \"R\") ||\n                    (face === \"F\" && scrambleList[scrambleList.length - 1].face === \"B\") ||\n                    (face === \"B\" && scrambleList[scrambleList.length - 1].face === \"F\")\n                )) {\n                    continue;\n                }\n            }\n            scrambleList.push({\n                face: face,\n                turn: turn\n            });\n        }\n        let scrambleText = \"\";\n        scrambleList.forEach((value) => {\n            scrambleText += value.face + value.turn + \" \";\n        });\n        scrambleText = scrambleText.trim();\n        return scrambleText;\n    };\n\n    const makeCorrectScramble = (scr1, scr2) => {\n        const scr1ListTmp = scr1.split(\" \");\n        let scr1List = [];\n        scr1ListTmp.forEach((item) => {\n            const itemTmp = item.split(\"\");\n            if (itemTmp.length === 1) {\n                itemTmp.push(\"\");\n            }\n            scr1List.push(itemTmp);\n        });\n        const scr2ListTmp = scr2.split(\" \");\n        let scr2List = [];\n        scr2ListTmp.forEach((item) => {\n            const itemTmp = item.split(\"\");\n            if (itemTmp.length === 1) {\n                itemTmp.push(\"\");\n            }\n            scr2List.push(itemTmp);\n        });\n        const scr1ListRes = scr1List.slice();\n        const scr2ListRes = scr2List.slice();\n        let flag = true;\n        let count = 0;\n        while(flag) {\n            if (scr1List[scr1List.length - (count + 1)][0] !== scr2List[count][0]) {\n                flag = false;\n            } else {\n                if ((scr1List[scr1List.length - (count + 1)][1] === \"\" && scr2List[count][1] === \"'\")\n                    || (scr1List[scr1List.length - (count + 1)][1] === \"'\" && scr2List[count][1] === \"\")\n                    || (scr1List[scr1List.length - (count + 1)][1] === \"2\" && scr2List[count][1] === \"2\")) {\n                    scr1ListRes.pop();\n                    scr2ListRes.shift();\n                    count++;\n                } else if ((scr1List[scr1List.length - (count + 1)][1] === \"'\" && scr2List[count][1] === \"2\")\n                    || (scr1List[scr1List.length - (count + 1)][1] === \"2\" && scr2List[count][1] === \"'\")) {\n                    scr1ListRes[scr1ListRes.length - (count + 1)][1] = \"\";\n                    scr2ListRes.shift();\n                    flag = false;\n                } else if ((scr1List[scr1List.length - (count + 1)][1] === \"\" && scr2List[count][1] === \"2\")\n                    || (scr1List[scr1List.length - (count + 1)][1] === \"2\" && scr2List[count][1] === \"\")) {\n                    scr1ListRes[scr1ListRes.length - (count + 1)][1] = \"'\";\n                    scr2ListRes.shift();\n                    flag = false;\n                } else if ((scr1List[scr1List.length - (count + 1)][1] === \"\" && scr2List[count][1] === \"\")\n                    || (scr1List[scr1List.length - (count + 1)][1] === \"'\" && scr2List[count][1] === \"'\")) {\n                    scr1ListRes[scr1ListRes.length - (count + 1)][1] = \"2\";\n                    scr2ListRes.shift();\n                    flag = false;\n                }\n            }\n        }\n        const scrList = scr1ListRes.concat(scr2ListRes);\n        let scrStr = \"\";\n        scrList.forEach((item) => {\n            scrStr += item[0] + item[1] + \" \";\n        });\n        return scrStr\n    };\n\n    return {\n        makeShortScramble: makeShortScramble,\n        makeCorrectScramble: makeCorrectScramble\n    }\n})();\n\nmodule.exports = scrambleLib","const twophase = (() => {\n\nconst U = 0;\nconst F = 1;\nconst R = 2;\nconst D = 3;\nconst B = 4;\nconst L = 5;\n\nlet moveName;\nlet moveObject;\nlet restrictedMove;\nlet Cnk;\n\nlet twistTable;\nlet flipTable;\nlet eSliceTable;\nlet cPTable;\nlet UDEPTable;\nlet eSliceTable2;\n\nlet twistESlicePrun;\nlet flipESlicePrun;\nlet cPESlicePrun;\nlet UDEPESlicePrun;\n\nlet initialized = false;\n\nconst getTwist = (obj) => {\n  let ret = 0;\n  for (let i = 0; i < 7; i++) {\n    ret *= 3;\n    ret += obj.co[i]\n  }\n  return ret;\n}\n\nconst getFlip = (obj) => {\n  let ret = 0;\n  for (let i = 0; i < 11; i++) {\n    ret *= 2;\n    ret += obj.eo[i]\n  }\n  return ret;\n}\n\nconst getESlice = (obj) => {\n  let ret = 0\n  let s = 4;\n  for (let i = 0; i < 12; i++) {\n    if (obj.ep[i] > 7) {\n      ret += Cnk[11 - i][s--];\n    }\n  }\n  return ret;\n}\n\nconst getCP = (obj) => {\n  let flag = 255;\n  let ret = 0;\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 255 >> 8 - obj.cp[i];\n    ret += fact(7 - i) * bitCount(flag & tmp);\n    flag ^= 1 << obj.cp[i];\n  }\n  return ret;\n}\n\nconst getUDEP = (obj) => {\n  let flag = 255;\n  let ret = 0;\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 255 >> 8 - obj.ep[i];\n    ret += fact(7 - i) * bitCount(flag & tmp);\n    flag ^= 1 << obj.ep[i];\n  }\n  return ret;\n}\n\nconst getESlice2 = (obj) => {\n  let ret = 0\n  let flag = 15;\n  let tmp;\n  let cur;\n  for (let i = 0; i < 4; i++) {\n    cur = obj.ep[i + 8] - 8;\n\n    tmp = 15 >> 4 - cur;\n    ret += fact(3 - i) * bitCount(flag & tmp);\n    flag ^= 1 << cur;\n  }\n  return ret;\n}\n\nconst setTwist = (obj, idx) => {\n  let tw = 0\n  for (let i = 0; i < 7; i++) {\n    obj.co[i] = idx / (3 ** (6 - i)) | 0;\n    tw += obj.co[i];\n    idx = idx % (3 ** (6 - i));\n  }\n  obj.co[7] = (15 - tw) % 3;\n}\n\nconst setFlip = (obj, idx) => {\n  let fl = 0;\n  for (let i = 0; i < 11; i++) {\n    obj.eo[10 - i] = idx & 1;\n    fl += obj.eo[10 - i];\n    idx = idx >>> 1;\n  }\n  obj.eo[11] = (12 - fl) % 2\n}\n\nconst setESlice = (obj, idx) => {\n  let s = 4;\n  for (let i = 0; i < 12; i++) {\n    if (idx >= Cnk[11 - i][s]) {\n      obj.ep[i] = s + 7;\n      idx -= Cnk[11 - i][s--];\n    } else {\n      obj.ep[i] = i - 4 + s;\n    }\n  }\n}\n\nconst setCP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7];\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    obj.cp[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(7 - i);\n  }\n}\n\nconst setUDEP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7];\n  let tmp;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    obj.ep[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(7 - i);\n  }\n}\n\nconst setESlice2 = (obj, idx) => {\n  let arr = [8, 9, 10, 11];\n  let tmp;\n  for (let i = 0; i < 4; i++) {\n    tmp = 1 << idx / fact(3 - i) | 0;\n    obj.ep[i + 8] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(3 - i);\n  }\n}\n\nconst setEP = (obj, idx) => {\n  let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  let tmp;\n  for (let i = 0; i < 12; i++) {\n    tmp = 1 << idx / fact(11 - i) | 0;\n    obj.ep[i] = arr.splice(bitCount(tmp - 1), 1)[0];\n    idx = idx % fact(11 - i);\n  }\n}\n\nconst getCornerParity = (idx) => {\n  let tmp;\n  let p = 0;\n  for (let i = 0; i < 8; i++) {\n    tmp = 1 << idx / fact(7 - i) | 0;\n    p += bitCount(tmp - 1);\n    idx = idx % fact(7 - i);\n  }\n  return p & 1;\n}\n\nconst getEdgeParity = (idx) => {\n  let tmp;\n  let p = 0;\n  for (let i = 0; i < 12; i++) {\n    tmp = 1 << idx / fact(11 - i) | 0;\n    p += bitCount(tmp - 1);\n    idx = idx % fact(11 - i);\n  }\n  return p & 1;\n}\n\nconst initTable = () => {\n  initTwistTable();\n  initFlipTable();\n  initESliceTable();\n  initCPTable();\n  initUDEPTable();\n  initESliceTable2();\n}\n\nconst initTwistTable = () => {\n  twistTable = create2DArray(2187, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 2187; i++) {\n    setTwist(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      twistTable[i][j] = getTwist(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initFlipTable = () => {\n  flipTable = create2DArray(2048, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 2048; i++) {\n    setFlip(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      flipTable[i][j] = getFlip(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initESliceTable = () => {\n  eSliceTable = create2DArray(495, 18);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 495; i++) {\n    setESlice(obj_0, i);\n    for (j = 0; j < 18; j++) {\n      eSliceTable[i][j] = getESlice(obj_0.apply(moveObject[j]));\n    }\n  }\n}\n\nconst initCPTable = () => {\n  cPTable = create2DArray(40320, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 40320; i++) {\n    setCP(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      cPTable[i][j] = getCP(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initUDEPTable = () => {\n  UDEPTable = create2DArray(40320, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 40320; i++) {\n    setUDEP(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      UDEPTable[i][j] = getUDEP(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initESliceTable2 = () => {\n  eSliceTable2 = create2DArray(24, 10);\n  let obj_0 = new ArrayCube()\n  let i, j;\n  for (i = 0; i < 24; i++) {\n    setESlice2(obj_0, i);\n    for (j = 0; j < 10; j++) {\n      eSliceTable2[i][j] = getESlice2(obj_0.apply(moveObject[restrictedMove[j]]));\n    }\n  }\n}\n\nconst initPrun = () => {\n  initTwistESlicePrun();\n  initFlipESlicePrun();\n  initCPESlicePrun();\n  initUDEPESlicePrun();\n}\n\nconst initTwistESlicePrun = () => {\n  twistESlicePrun = Array(1082565);\n  twistESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  twistESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 1082565) {\n    for (i = 0; i < 1082565; i++) {\n      if (twistESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = twistTable[i / 495 | 0];\n      children2 = eSliceTable[i % 495];\n      for (j = 0; j < 18; j++) {\n        if (twistESlicePrun[children1[j] * 495 + children2[j]] === 15) {\n          twistESlicePrun[children1[j] * 495 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initFlipESlicePrun = () => {\n  flipESlicePrun = Array(1013760);\n  flipESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  flipESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 1013760) {\n    for (i = 0; i < 1013760; i++) {\n      if (flipESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = flipTable[i / 495 | 0];\n      children2 = eSliceTable[i % 495];\n      for (j = 0; j < 18; j++) {\n        if (flipESlicePrun[children1[j] * 495 + children2[j]] === 15) {\n          flipESlicePrun[children1[j] * 495 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initCPESlicePrun = () => {\n  cPESlicePrun = Array(967680);\n  cPESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  cPESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 967680) {\n    for (i = 0; i < 967680; i++) {\n      if (cPESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = cPTable[i / 24 | 0];\n      children2 = eSliceTable2[i % 24];\n      for (j = 0; j < 10; j++) {\n        if (cPESlicePrun[children1[j] * 24 + children2[j]] === 15) {\n          cPESlicePrun[children1[j] * 24 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nconst initUDEPESlicePrun = () => {\n  UDEPESlicePrun = Array(967680);\n  UDEPESlicePrun.fill(15);\n\n  let children1, children2, done, depth, i, j;\n\n  UDEPESlicePrun[0] = 0;\n  done = 1;\n  depth = 0;\n  while (done < 967680) {\n    for (i = 0; i < 967680; i++) {\n      if (UDEPESlicePrun[i] !== depth) {\n        continue;\n      }\n      \n      children1 = UDEPTable[i / 24 | 0];\n      children2 = eSliceTable2[i % 24];\n      for (j = 0; j < 10; j++) {\n        if (UDEPESlicePrun[children1[j] * 24 + children2[j]] === 15) {\n          UDEPESlicePrun[children1[j] * 24 + children2[j]] = depth + 1;\n          done++\n        }\n      }\n    }\n    depth++;\n  }\n}\n\nclass ArrayCube {\n  constructor(cp, co, ep, eo) {\n    this.cp = cp ? cp : [0, 1, 2, 3, 4, 5, 6, 7]\n    this.co = co ? co : [0, 0, 0, 0, 0, 0, 0, 0]\n    this.ep = ep ? ep : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    this.eo = eo ? eo : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  }\n\n  apply(move) {\n    return new ArrayCube(\n      this.cp.map((cur, idx) => this.cp[move.cp[idx]]),\n      this.co.map((cur, idx) => (this.co[move.cp[idx]] + move.co[idx]) % 3),\n      this.ep.map((cur, idx) => this.ep[move.ep[idx]]),\n      this.eo.map((cur, idx) => (this.eo[move.ep[idx]] + move.eo[idx]) % 2)\n    )\n  }\n\n  copy() {\n    return new ArrayCube(\n      this.cp,\n      this.co,\n      this.ep,\n      this.eo\n    )\n  }\n\n  toIndexPhase1() {\n    return new IndexCubePhase1(\n      getTwist(this),\n      getFlip(this),\n      getESlice(this),\n      []\n    )\n  }\n\n  toIndexPhase2() {\n    return new IndexCubePhase2(\n      getCP(this),\n      getUDEP(this),\n      getESlice2(this),\n      []\n    )\n  }\n}\n\nclass IndexCubePhase1 {\n  constructor(twist, flip, eslice, move) {\n    this.twist = twist ? twist : 0\n    this.flip = flip ? flip : 0\n    this.eslice = eslice ? eslice : 0\n    this.move = move ? move : []\n  }\n\n  apply(move) {\n    let newTwist, newFlip, newESlice, newMove\n    newTwist = twistTable[this.twist][move]\n    newFlip = flipTable[this.flip][move]\n    newESlice = eSliceTable[this.eslice][move]\n    newMove = this.move.slice()\n    newMove.push(move)\n    return new IndexCubePhase1(\n      newTwist,\n      newFlip,\n      newESlice,\n      newMove\n    )\n  }\n\n  toArray() {\n    return\n  }\n}\n\nclass IndexCubePhase2 {\n  constructor(cp, udep, eslice2, move) {\n    this.cp = cp ? cp : 0\n    this.udep = udep ? udep : 0\n    this.eslice2 = eslice2 ? eslice2 : 0\n    this.move = move ? move : []\n  }\n\n  apply(move) {\n    let _move = restrictedMove.indexOf(move)\n    let newCp, newUDEP, newESlice2, newMove\n    newCp = cPTable[this.cp][_move]\n    newUDEP = UDEPTable[this.udep][_move]\n    newESlice2 = eSliceTable2[this.eslice2][_move]\n    newMove = this.move.slice()\n    newMove.push(move)\n    return new IndexCubePhase2(\n      newCp,\n      newUDEP,\n      newESlice2,\n      newMove\n    )\n  }\n\n  toArray() {\n    return\n  }\n}\n\nconst search = (root, max) => {\n  let stack, _stack, root1, root2, _root\n\n  root1 = root.toIndexPhase1()\n\n  for (let depth = 10; depth <= 13; depth++) {\n    stack = new Stack()\n    stack.push(root1)\n    let cur, nextMove, nextFace, curFace\n    while(stack.size() > 0) {\n      cur = stack.pop();\n      if(cur.move.length === depth && cur.twist === 0 && cur.flip === 0 && cur.eslice === 0) {\n        _root = root.copy()\n        for (let i = 0; i < cur.move.length; i++) {\n          _root = _root.apply(moveObject[cur.move[i]])\n        }\n        root2 = _root.toIndexPhase2()\n\n        for (let _depth = 0; _depth <= max - cur.move.length; _depth++) {\n          _stack = new Stack()\n          _stack.push(root2)\n          let _cur, _nextMove, _nextFace, _curFace\n          while(_stack.size() > 0) {\n            _cur = _stack.pop();\n            if(_cur.cp === 0 && _cur.udep === 0 && _cur.eslice2 === 0) {\n              return cur.move.concat(_cur.move)\n            }\n\n            if (_cur.move.length + Math.max(cPESlicePrun[_cur.cp * 24 + _cur.eslice2], UDEPESlicePrun[_cur.udep * 24 + _cur.eslice2]) > _depth) {\n              continue;\n            }\n\n            for (let i = 0; i < 10; i++) {\n              _nextMove = restrictedMove[i]\n              _nextFace = _nextMove / 3 | 0;\n              _curFace = _cur.move.length === 0 ? -1 : _cur.move[_cur.move.length - 1] / 3 | 0;\n              if (_nextFace % 3 !== _curFace % 3 || _nextFace > _curFace) {\n                _stack.push(_cur.apply(_nextMove));\n              }\n            }\n          }\n        }\n      }\n  \n      if (cur.move.length + Math.max(twistESlicePrun[cur.twist * 495 + cur.eslice], flipESlicePrun[cur.flip * 495 + cur.eslice]) > depth) {\n        continue;\n      }\n  \n      for (nextMove = 0; nextMove < 18; nextMove++) {\n        nextFace = nextMove / 3 | 0;\n        curFace = cur.move.length === 0 ? -1 : cur.move[cur.move.length - 1] / 3 | 0;\n        if (nextFace % 3 !== curFace % 3 || nextFace > curFace) {\n          stack.push(cur.apply(nextMove));\n        }\n      }\n    }\n  }\n\n  return null\n}\n\nconst getRandomState = (seed) => {\n  let cp, co, ep, eo;\n  let random = new Random(seed);\n  let obj = new ArrayCube();\n  do {\n    cp = random.randomInt(40320);\n    ep = random.randomInt(479001600);\n  } while (getCornerParity(cp) !== getEdgeParity(ep))\n  co = random.randomInt(2187);\n  eo = random.randomInt(2048);\n\n  setCP(obj, cp);\n  setTwist(obj, co);\n  setEP(obj, ep);\n  setFlip(obj, eo)\n  \n  return obj;\n}\n\nconst cancelMoves = (moves) => {\n  let l, faceList, axisList, suffixList, newFaceList, newAxisList, newSuffixList, cancelled, ret;\n  l = moves.length;\n  faceList = Array(l);\n  axisList = Array(l);\n  suffixList = Array(l);\n  for (let i = 0; i < l; i++) {\n    faceList[i] = moves[i] / 3 | 0;\n    axisList[i] = faceList[i] % 3;\n    suffixList[i] = moves[i] % 3\n  }\n  \n  do {\n    cancelled = 0;\n    l = faceList.length;\n\n    for (let i = 0; i < l - 1; i++) {\n      if (axisList[i] === axisList[i + 1] && faceList[i] > faceList[i + 1]) {\n        swapElement(faceList, i);\n        swapElement(axisList, i);\n        swapElement(suffixList, i);\n      }\n    }\n\n    for (let i = 0; i < l - 1; i++) {\n      if (faceList[i] === faceList[i + 1]) {\n        cancelled++;\n        suffixList[i] = (suffixList[i] + suffixList[i + 1] + 1) % 4;\n        suffixList[i + 1] = 3;\n      }\n    }\n\n    newFaceList = [];\n    newAxisList = [];\n    newSuffixList = [];\n\n    for (let i = 0; i < l; i++) {\n      if (suffixList[i] !== 3) {\n        newFaceList.push(faceList[i]);\n        newAxisList.push(axisList[i]);\n        newSuffixList.push(suffixList[i]);\n      }\n    }\n\n    faceList = newFaceList.slice();\n    axisList = newAxisList.slice();\n    suffixList = newSuffixList.slice();\n  } while (cancelled > 0)\n\n  ret = Array(faceList.length);\n  for (let i = 0; i < faceList.length; i++) {\n    ret[i] = faceList[i] * 3 + suffixList[i];\n  }\n  return ret;\n}\n\nconst swapElement = (arr, idx) => {\n  arr.splice(idx, 2, arr[idx + 1], arr[idx]);\n}\n\nconst initUtil = () => {\n  Cnk = create2DArray(12, 12);\n  for (let i = 0; i < 12; i++) {\n    Cnk[i].fill(0);\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (let j = 1; j < i; j++) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n\n  moveName = [\"U\", \"U2\", \"U'\", \"F\", \"F2\", \"F'\", \"R\", \"R2\", \"R'\", \"D\", \"D2\", \"D'\", \"B\", \"B2\", \"B'\", \"L\", \"L2\", \"L'\"];\n\n  moveObject = Array(18);\n  moveObject[U * 3] = new ArrayCube(\n    [3, 0, 1, 2, 4, 5, 6, 7],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [4, 5, 2, 3, 1, 0, 6, 7, 8, 9, 10, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  )\n  moveObject[F * 3] = new ArrayCube(\n    [1, 7, 2, 3, 0, 5, 6, 4],\n    [1, 2, 0, 0, 2, 0, 0, 1],\n    [9, 1, 2, 8, 4, 5, 6, 7, 0, 3, 10, 11],\n    [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0]\n  );\n  moveObject[R * 3] = new ArrayCube(\n    [4, 1, 2, 0, 5, 3, 6, 7],\n    [2, 0, 0, 1, 1, 2, 0, 0],\n    [0, 1, 2, 3, 8, 5, 6, 11, 7, 9, 10, 4],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  moveObject[D * 3] = new ArrayCube(\n    [0, 1, 2, 3, 7, 4, 5, 6],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 1, 7, 6, 4, 5, 2, 3, 8, 9, 10, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  moveObject[B * 3] = new ArrayCube(\n    [0, 1, 3, 5, 4, 6, 2, 7],\n    [0, 0, 1, 2, 0, 1, 2, 0],\n    [0, 11, 10, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]\n  );\n  moveObject[L * 3] = new ArrayCube(\n    [0, 2, 6, 3, 4, 5, 7, 1],\n    [0, 1, 2, 0, 0, 0, 1, 2],\n    [0, 1, 2, 3, 4, 10, 9, 7, 8, 5, 6, 11],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  );\n  for (let i = 0; i < 6; i++) {\n    moveObject[i * 3 + 1] = moveObject[i * 3].apply(moveObject[i * 3])\n    moveObject[i * 3 + 2] = moveObject[i * 3 + 1].apply(moveObject[i * 3])\n  }\n\n  restrictedMove = [0, 1, 2, 4, 7, 9, 10, 11, 13, 16];\n}\n\nconst bitCount = (bits) =>{\n  bits = (bits & 0x55555555) + (bits >> 1 & 0x55555555);\n  bits = (bits & 0x33333333) + (bits >> 2 & 0x33333333);\n  bits = (bits & 0x0f0f0f0f) + (bits >> 4 & 0x0f0f0f0f);\n  bits = (bits & 0x00ff00ff) + (bits >> 8 & 0x00ff00ff);\n  return (bits & 0x0000ffff) + (bits >>16 & 0x0000ffff);\n}\n\nconst fact = (n) => {\n  let fact = 1;\n  for (let i = 1; i <= n; i++) {\n    fact *= i;\n  }\n  return fact;\n}\n\nconst create2DArray = (l1, l2) => {\n  let ret = Array(l1);\n  for (let i = 0; i < l1; i++){\n    ret[i] = Array(l2);\n  }\n  return ret;\n}\n\nclass Random {\n  constructor(seed) {\n    this.x = 123456789;\n    this.y = 362436069;\n    this.z = 521288629;\n    this.w = seed ? seed : Math.floor(Math.random() * Date.now());\n  }\n  \n  _random() {\n    let t;\n \n    t = this.x ^ (this.x << 11);\n    this.x = this.y; this.y = this.z; this.z = this.w;\n    return this.w = (this.w ^ (this.w >>> 19)) ^ (t ^ (t >>> 8)); \n  }\n  \n  randomInt(n) {\n    const r = Math.abs(this._random());\n    return (r % n);\n  }\n}\n\nclass Stack {\n  constructor() {\n    this.heap = [];\n  }\n\n  empty() {\n    if (this.heap.length === 0) return true;\n    return false;\n  }\n\n  size() {\n    return this.heap.length;\n  }\n\n  top() {\n    return this.heap[0];\n  }\n \n  push(item) {\n    this.heap.unshift(item);\n  }\n  \n  pop() {\n    return this.heap.shift();\n  }\n}\n\nconst initialize = () => {\n  if (!initialized) {\n    initUtil();\n    initTable();\n    initPrun();\n    initialized = true;\n  }\n}\n\nconst solve = (scramble, max = 22) => {\n  // console.log('scramble: ' + scramble);\n  let arr = scramble.split(' ');\n  let obj = new ArrayCube()\n  let _solution;\n  let solution = '';\n\n  for (let i = 0; i < arr.length; i++) {\n    if (moveName.indexOf(arr[i]) >= 0) obj = obj.apply(moveObject[moveName.indexOf(arr[i])])\n  }\n\n  _solution = search(obj, max);\n  if (_solution == null) {\n    return 'Error';\n  }\n  _solution = cancelMoves(_solution);\n  _solution.forEach((val) => {\n    solution += moveName[val] + ' '\n  })\n  // console.log('solution: ' + solution);\n  // console.log(_solution.length + ' moves');\n  return solution;\n}\n\nconst getScramble = (seed, max = 22) => {\n  let scr, solution, ret;\n\n  scr = getRandomState(seed);\n  solution = search(scr, max);\n  if (solution == null) {\n    return 'Error';\n  }\n  solution = cancelMoves(solution);\n  solution.reverse();\n  ret = '';\n  solution.forEach((val) => {\n    ret += moveName[val] + ' '\n  })\n  console.log(ret + '[' + solution.length + ' moves]')\n  return ret;\n}\n\nreturn {\n  initialize: initialize,\n  solve: solve,\n  getScramble: getScramble,\n}\n\n})();\n\nexport default twophase","import React, {useEffect, useState} from \"react\";\nimport {\n    Button,\n    FormControl,\n    InputLabel, makeStyles,\n    MenuItem,\n    Select,\n    Table, TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow, Typography\n} from \"@material-ui/core\";\nimport inverse from './lib/inverse'\nimport twophase from './lib/twophase'\nimport scrambleLib from './lib/scramble'\n\nfunction App() {\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            margin: '0 auto',\n            padding: '20px',\n            maxWidth: '700px'\n        },\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n    }));\n    const classes = useStyles();\n\n    const [scrambleList, setScrambleList] = useState([])\n    const [moveCount, setMoveCount] = useState('')\n    const [itemCount, setItemCount] = useState('')\n    const [isVisible, setIsVisible] = useState([])\n\n    useEffect(() => {\n        if (moveCount !== '' && itemCount !== '') {\n            const isVisibleListTmp = []\n            const scrambleListTmp = []\n            for (let i = 0; i < itemCount; i++) {\n                const pair = makeScramble(moveCount)\n                scrambleListTmp.push(pair)\n                isVisibleListTmp.push(false)\n            }\n            setScrambleList(scrambleListTmp)\n            setIsVisible(isVisibleListTmp)\n        }\n    }, [moveCount, itemCount])\n\n    const handleMovesChange = (event) => {\n        setMoveCount(event.target.value)\n    }\n\n    const handleCountChange = (event) => {\n        setItemCount(event.target.value)\n    }\n\n    const handleButtonChange = (index) => {\n        const isVisibleListTmp = isVisible.slice()\n        if (isVisible[index]) {\n            isVisibleListTmp[index] = false\n        } else {\n            isVisibleListTmp[index] = true\n        }\n        setIsVisible(isVisibleListTmp)\n    }\n\n    const makeScramble = (moveCount) => {\n        twophase.initialize()\n        let shortScramble = ''\n        let redundantScramble = ''\n        while (redundantScramble.split(' ').length < 19) {\n            shortScramble = scrambleLib.makeShortScramble(moveCount);\n            redundantScramble = inverse.inverse(twophase.solve(shortScramble))\n        }\n        return [shortScramble, redundantScramble]\n    }\n\n    return (\n        <div className={classes.container}>\n            <Typography variant=\"h4\">詰めキューブスクランブル生成器</Typography>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"moves-label\">手数</InputLabel>\n                <Select labelId=\"moves-label\" id=\"moves\" value={moveCount} onChange={handleMovesChange}>\n                    <MenuItem value={2}>2</MenuItem>\n                    <MenuItem value={3}>3</MenuItem>\n                    <MenuItem value={4}>4</MenuItem>\n                    <MenuItem value={5}>5</MenuItem>\n                    <MenuItem value={6}>6</MenuItem>\n                    <MenuItem value={7}>7</MenuItem>\n                    <MenuItem value={8}>8</MenuItem>\n                </Select>\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"count-label\">個数</InputLabel>\n                <Select labelId=\"count-label\" id=\"count\" value={itemCount} onChange={handleCountChange}>\n                    <MenuItem value={3}>mo3</MenuItem>\n                    <MenuItem value={5}>ao5</MenuItem>\n                    <MenuItem value={12}>ao12</MenuItem>\n                </Select>\n            </FormControl>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>スクランブル</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {scrambleList.map((scramble, index) => (\n                            <TableRow key={index}>\n                                <TableCell>{scramble[1]}</TableCell>\n                                <TableCell>{\n                                    isVisible[index] && inverse.inverse(scramble[0])\n                                }</TableCell>\n                                <TableCell><Button variant=\"contained\" onClick={() => handleButtonChange(index)}>解答</Button></TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}